%YAML 1.2
---

comment: |-
  LNT syntax for Sublime Text.
  Based on the LNT to LOTOS reference manual:
  ftp://ftp.inrialpes.fr/pub/vasy/publications/cadp/Champelovier-Clerc-Garavel-et-al-10.pdf

name: LNT
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - lnt
scope: source.lnt
variables:
  identifier: \b(?:[A-Za-z]\w*)\b

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: module

  inside-module:
    - include: types
    - include: channels
    - include: processes
    - include: pragmas
    - include: functions
    - include: constants
    - include: keywords
    - include: operators
    - include: strings
    - include: type-annotation

  module:
    - meta_scope: meta.namespace.lnt
    - match: \bmodule\b
      #meta_scope: meta.namespace.lnt
      scope: keyword.other.lnt
      push: [inside-module, is, with, ident-module]
    - match: .+
      scope: invalid.illegal.lnt

  ident-module:
    - match: (?=with)|(?=is)
      pop: true
    - match: '{{identifier}}'
      scope: entity.name.namespace.lnt
    - match: \(
      push:
      - meta_scope: meta.namespace.include.lnt
      - match: \)
        pop: true

  types:
    - meta_scope: meta.type.declaration.lnt
    - match: '\btype\b'
      scope: keyword.declaration.type.lnt
      push: [inside-type, is, ident-type]

  inside-type:
    - meta_scope: meta.type.declaration.lnt
    - match: \b(sorted|set|array|list|range)\b
      scope: storage.type.lnt
    - include: pragmas
    - match: (?=with)
      push: with
    - match: (?=\()
      push: signature
    - match: '\bend\b'
      scope: keyword.declaration.type.end.lnt
      set:
        - match: '\btype\b'
          scope: keyword.declaration.type.end.lnt
          pop: true
        - match: '\w+'
          scope: invalid.illegal.endtype.lnt
          pop: true
    - include: constants
    - include: operators
    # For predicate types
    - include: type-annotation
    - match: '\bwhere\b'
      scope: keyword.other.lnt

  channels:
    - meta_scope: meta.channel.declaration.lnt
    - match: '\bchannel\b'
      scope: keyword.declaration.channel.lnt
      push: [inside-channel, is, ident-type]

  inside-channel:
    - match: '\('
      set:
        - match: '{{identifier}}(?!\s*:)'
          scope: storage.type.lnt
        - match: '{{identifier}}'
          scope: variable.parameter.lnt
        - match: '\)'
          set:
          - match: '\bend\b'
            scope: keyword.declaration.channel.end.lnt
            set:
              - match: '\bchannel\b'
                scope: keyword.declaration.channel.end.lnt
                pop: true
              - match: '\w+'
                scope: invalid.illegal.endchannel.lnt
                pop: true

  processes:
    - meta_scope: meta.process.lnt
    - match: '\b(end)(\s+)process\b'
      scope: keyword.declaration.lnt
      set: inside-module
    - match: '\bprocess\b'
      scope: keyword.declaration.process.lnt
      push: [declaration, ident-fun]

  functions:
    - meta_scope: meta.function.lnt
    - match: '\bfunction\b'
      scope: keyword.declaration.function.lnt
      push: [declaration, ident-fun]
    - match: '\bend\s+function\b'
      scope: keyword.declaration.lnt
      set: inside-module

  declaration:
    - match: (?=\[)
      push: gates
    - match: (?=\()
      push: signature
    - include: type-annotation
    - include: is

  ident-class:
    - match: '{{identifier}}'
      scope: entity.name.class.lnt
      pop: true

  ident-fun:
    - match: '{{identifier}}|\_[A-Za-z]\w*\b'
      scope: entity.name.function.lnt
      pop: true

  ident-type:
    - match: '{{identifier}}'
      scope: storage.type.lnt
      pop: true

  type-annotation:
    - match: (?=:)
      push: ident-type

  gates:
    - match: '\['
      set:
        - match: '\braise\b'
          scope: keyword.control.lnt
        - match: '{{identifier}}'
          scope: variable.parameter.lnt
        - include: type-annotation
        - match: '\]'
          pop: true

  signature:
    - meta_scope: meta.function.parameters.lnt
    - match: '\('
      set:
        - match: '\bin|out|var\b'
          scope: keyword.other.lnt
        - match: '{{identifier}}'
          scope: variable.parameter.lnt
        - include: type-annotation
        - match: '\)'
          pop: true

  operators:
    - match: =>|:=
      scope: keyword.operator.assignment.lnt
    - match: \|\||\[\]
      scope: keyword.operator.process.lnt
    - match: \|
      scope: keyword.operator.lnt
    - match: =|!=|>|<|\b(and|or|not)\b
      scope: keyword.operator.logical.lnt
    - match: \+|-|\*|/|\b(mod|rem|abs|min|max|succ|prec|sign)\b
      scope: keyword.operator.arithmetic.lnt
    - match: \!?\?
      scope: keyword.operator.lnt
    - match: \bof\b
      scope: keyword.operator.word.lnt
      push: ident-type


  keywords:
    - match: '\b(any|as|assert|break|by|case|disrupt|else|elsif|end|eval|for|hide|if|in|loop|module|null|only|out|par|raise|range|return|select|stop|then|use|var|where|while)\b'
      scope: keyword.control.lnt

  is:
    - match: \bis\b
      scope: keyword.declaration.is.lnt
      pop: true

  with:
    - match: (?=end)|(?=is)
      pop: true
    - match: \bwith\b
      scope: keyword.other.with.lnt
      set:
      - match: \"(?:eq|ne|lt|le|gt|ge|ord|val|get|set|update|card|first|last|==|<=?|>=?|<>|\!=)\"
        scope: string.quoted.double.lnt
      - match: (?=end)|(?=is)
        pop: true


  pragmas:
    - match: (\!)(?:implemented|represented|iterated|compared|printed)by\b
      scope: keyword.other.lnt
      captures:
         1: punctuation.definition.keyword.lnt
    - match: (\!)(?:nat|int)\_(?:bits|sup|inf|check)
      scope: keyword.other.lnt
      captures:
         1: punctuation.definition.keyword.lnt
    - match: (\!)(?:(?:string\_)?card|list|bits|external)
      scope: keyword.other.lnt
      captures:
         1: punctuation.definition.keyword.lnt

  constants:
    - match: '\b(true|false|nil)\b'
      scope: constant.language.lnt
    - match: (?:\b|-)0[Bb][0-1]([0-1]|\_(?=[0-1]))*\b
      scope: constant.numeric.integer.octal.lnt
    - match: (?:\b|-)0[Oo][0-7]([0-7]|\_(?=[0-7]))*\b
      scope: constant.numeric.integer.octal.lnt
    - match: (?:\b|-)0[Xx][0-9a-fA-F]([0-9a-fA-F]|\_(?=[0-9a-fA-F]))*\b
      scope: constant.numeric.integer.hexadecimal.lnt
    - match: (?:\b|-)[0-9]([0-9]|\_(?=[0-9]))*(?!\.)\b
      scope: constant.numeric.integer.decimal.lnt
    - match: -?\.[0-9]+\b
      scope: constant.numeric.float.decimal.lnt
    - match: (?:\b|-)[0-9]+\.[0-9]*
      scope: constant.numeric.float.decimal.lnt

  strings:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character.
    - match: '"'
      scope: punctuation.definition.string.begin.lnt
      push: inside_string

  inside_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.lnt
    - match: '\.'
      scope: constant.character.escape.lnt
    - match: '"'
      scope: punctuation.definition.string.end.lnt
      pop: true

  comments:
    # One-line comments (Ada-style)
    - match: '--'
      scope: punctuation.definition.comment.lnt
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.double-hyphen.lnt
        - match: $\n?
          pop: true
      comments:
    # Multiline comments (ML-style)
    - match: '\*\)'
      scope: invalid.illegal.stray-end-comment.lnt
    - match: '\(\*'
      scope: punctuation.definition.comment.lnt
      push:
        - meta_scope: comment.block.lnt
        - match: '\*\)'
          pop: true

